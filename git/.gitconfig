[user]
	name = Evan Zacks
	email = zackse@gmail.com

[alias]
	ci = commit
	# reuse previous commit message, but update commit date
	cic = commit --reset-author -C
	cp = cherry-pick
	# Include stash creation date, colorize output.
	# (http://blogs.perl.org/users/ovid/2015/06/git-stashed.html)
	stashed = stash list --pretty=format:'%gd: %Cred%h%Creset %Cgreen[%ar]%Creset %s'
	# Commit a file, using the mtime for the commit date. Useful for
	# files edited a while ago but whose changes weren't committed.
	# Expects a single filename as the last argument. Prior arguments
	# are passed unmodified to `git commit'.
	#   http://stackoverflow.com/a/1853993/4356200
	#   http://blogs.atlassian.com/2014/10/advanced-git-aliases/
	cim = "!f() { for last; do true; done; date=`stat -c%y \"$last\"`; git commit --date=\"$date\" \"$@\"; }; f"
	# Commit using the last commit message for the optional, single file/dir argument
	# (default to the current directory)
	cil = "!f() { for last; do true; done; git cic $(git log -1 --pretty=%h \"${last:-.}\") \"$@\"; }; f"
	wip = commit -a -m WIP
	# meld any changes into previous commit
	cam = commit --amend -a --no-edit

	# https://gist.github.com/mwhite/6887990#gistcomment-1288654
	# branch delete: This checks out your local master branch and deletes all local branches
	#                that have already been merged to master
	prune-stale-branches = !sh -c \"git checkout master && git branch --merged | grep -v '\\*' | xargs -r -n 1 git branch -d\"

	# branch delete here: Deletes all local branches that have already been merged to the branch
	#                     that you're currently on
	prune-stale-branches-here = !sh -c \"git branch --merged | grep -v '\\*' | xargs -r -n 1 git branch -d\"

	# fetch upstream main branch ('master' or 'production'), then prune stale branches
	cleanup = "!f() { if git branch -r | grep -q origin/production; then git checkout production; else git checkout master; fi; git pull; git prune-stale-branches-here; }; f"
	cl = cleanup

	pop = reset HEAD^

	l1 = log --pretty=oneline

[push]
	default = simple

[pull]
	rebase = true

[url "git@github.com:"]
	pushInsteadOf = https://github.com/

[fetch]
	prune = true
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true

[rebase]
	autosquash = true
