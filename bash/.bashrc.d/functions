# -*- shell-script -*-
# vim: syn=sh

# start a web server in the current directory listening on PORT
pyhttp() {
    if [ -z "$1" ]; then
        echo "Usage: pyhttp <PORT>"
        return 1
    fi
    python -mSimpleHTTPServer $1
}

# open files in emacs (assumes emacs is running in server-mode).
# strips trailing colon and anything after to ease pasting content
# that includes line numbers (for example, output from `git grep')
ec() {
    for F in "$@"
    do
        FILE=${F%%:*}

        emacsclient -n "$FILE"
    done
}

# same, but in a new frame in the terminal
ecn() {
    for F in "$@"
    do
        FILE=${F%%:*}

        emacsclient -t "$FILE"
    done
}

# is this a word?
spell() {
    grep -i $1 /usr/share/dict/words
}

# review commit list before pushing to svn
gdnn() {
    git svn dcommit -n
}

# review changes (patches) before pushing to svn
gdn() {
    gdnn | tail -n +2 | awk '{print "git diff --color" " " $2 " " $3}' | sh
}

# show 20 most recently modified files (by ctime)
lcct() {
    ls -lctr "$@" | tail -20
}

# run perl -wc on all args
pwc() {
    for i in "$@"; do
    perl -wc $i
    done
}

# copy, then edit
cpm() {
    if [ $# -ne 2 ]; then
        echo Usage: cpm source dest
        echo
    else
        /bin/cp -f $1 $2
        /bin/chmod u+w $2
        $EDITOR $2
    fi
}

# edit perl module by name (`vipm LWP::UserAgent')
# from scozens?
vipm() {
    $EDITOR `perldoc -l $1 | sed -e 's/pod$/pm/'`
}
# print the version of a perl module (`version LWP::Simple')
# from scozens?
version() {
    perl -MUNIVERSAL::require -e "$1->require; print $1->VERSION"
}

# dump a list of perl modules imported in .pm files under DIR
fmod() {
    DIR=${1:-.}
    echo searching $DIR...
    find $DIR -name '*.pm' -exec egrep '^ *(use|require)' {} \; \
    | perl -nle 's/^ *//; s/;\s*$//; print+(split / /)[1]' \
    | sort -u
}

# ls -l, but only show directories.
# could also use `find . -mindepth 1 -maxdepth 1 -type d -ls'
lad() {
    ls -l "$@" | grep '^d'
}

# number of days between two dates:
# $ datediff 2016-07-24 2016-09-06
# 44.000000 days
datediff() {
    perl -le '
    BEGIN { $Date::Manip::Backend = "DM5"; }
    use Date::Manip;
    $d=DateCalc(ParseDate(+shift), ParseDate(+shift));
    print Delta_Format($d => 0 => "%dt"), " days"
    ' "$@"
}

# install a CPAN module
perlmod() {
    sudo cpanm "$@"
}

# encode/decode routines
uri_escape() {
    perl -MURI::Escape -le 'print uri_escape($_) for @ARGV' "$@"
}
uri_unescape() {
    perl -MURI::Escape -le 'print uri_unescape($_) for @ARGV' "$@"
}
decode_base64() { 
    perl -MMIME::Base64 -le 'print decode_base64(+shift)' "$@"
}
decode_qp() { 
    perl -MMIME::QuotedPrint -le 'print decode_qp(+shift)' "$@"
}
encode_base64() { 
    perl -MMIME::Base64 -le 'print encode_base64(+shift, "")' "$@"
}
encode_qp() { 
    perl -MMIME::QuotedPrint -le 'print encode_qp(+shift, "")' "$@"
}
decode_rfc2047() {
    perl -MEncode -MEncode::Alias -le '
        define_alias("unicode-1-1-utf-7" => "utf-7");
        define_alias("7bit-jis", "shift-jis");
        define_alias("TIS-620" => "iso-8859-11");
        define_alias("ksc5601" => "euc-kr");
        define_alias("x-mac-roman" => "MacRoman");
        # BNMA-3900: normalize Hebrew charset. nested quoting is required, see perldoc
        define_alias(qr/^iso-8859-8-?i$/i => q{"iso-8859-8"});

        for (@ARGV) {
            print encode("UTF-8", decode("MIME-Header" => $_));
        }' "$@"
}

# print out first line ("h"eader) and pass the rest to grep
hgrep() {
    perl -e '
        my $c;
        while (sysread(STDIN, $c, 1)) {
            print $c;
            last if $c eq "\n";
        }
        exec("grep", @ARGV) or die "exec(grep): $!"
    ' -- "$@"
}

# functions to use in PROMPT_COMMAND

# emit git branch
# http://vvv.tobiassjosten.net/bash/dynamic-prompt-with-git-and-ansi-colors
git_prompt() {
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        return 0
    fi

    git_branch=$(git branch 2>/dev/null| sed -n '/^\*/s/^\* //p')

    echo " [$git_branch]"
}

virtualenv_prompt() {
    if [ -z "$VIRTUAL_ENV" ]; then
        return 0
    fi

    venv=$(basename $VIRTUAL_ENV)
    echo "($venv)"
}

update_for_perlbrew() {
    if [ -z "$PERLBREW_PERL" ]; then
        return 0
    fi

    echo "[$PERLBREW_PERL]"
}

# Resolve hostname, emit /etc/hosts format.
# Note: only emits the first IP found.
hhost() {
    if [ -z "$1" ]; then
        echo "Usage: hhost <HOSTNAME>" >&2
        return 1
    fi

    local HOST="$1"
    if [ -n "$(command -v dig)" ]; then
        IP=$(dig +short "$HOST" 2>&- | head -1)
    elif [ -n "$(command -v host)" ]; then
        IP=$(host "$HOST" \
             | awk '/has address/ { print $NF; exit }')
    else
        echo "Can't find dig(1) or host(1)" >&2
        return 1
    fi

    if [ -n "$IP" ]; then
        echo "$HOST $IP"
        return 0
    else
        echo "Could not resolve [$HOST]" >&2
        return 1
    fi
}

# Print member DNs of the specified LDAP group.
# Requires https://github.com/zackse/ldaps.
members() {
    if [ -z "$1" ]; then
        echo "Usage: members <ldap-filter-or-uid>" >&2
        return 1
    fi

    # base64-encoded content is prefixed with an extra ':' character
    # e.g., 'member:: <b64_content>'
    #    vs.'member: <non_b64_content>'
    ldaps "$1" member \
        | perl -MMIME::Base64 -anle '
              next if ! s/^member://;
              s/^: (.*)/decode_base64($1)/e;
              s/^ //;
              print
          ' \
        | sort
}

# completion available
if [ "$(declare -F _ldaps)" = "_ldaps" ]; then
    complete -F _ldaps members
fi

# from cblack
dfmt () {
    docker ps --format 'table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}'
}

# Remove line from ~/.ssh/known_hosts
# Offending ECDSA key in /Users/zackse/.ssh/known_hosts:131
remove_from_known_hosts() {
    local LINE_NUMBER=$(perl -e 'print $1 if "@ARGV" =~ m{Offending.+key in.+\.ssh/known_hosts:(\d+)}' "$@")
    if [ -n "$LINE_NUMBER" ]; then
        sed -i -e ${LINE_NUMBER}d $HOME/.ssh/known_hosts
    fi
}
